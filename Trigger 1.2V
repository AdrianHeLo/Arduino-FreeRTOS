//☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☣☢
//☠☠☠☠☠☠☠☠Librerias☠☠☠☠☠☠☠☠
//☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠
#include <LiquidCrystal_I2C_Hangul.h>
#include<Wire.h>
#include <EEPROM.h>
#include <SPI.h>
#include <SD.h>

// fecha 18/04/22

//☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠
//☠☠☠☠☠DefiniciondePines☠☠☠☠☠☠
//☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠
//☠☠☠☠☠☠☠Botones☠☠☠☠☠☠☠☠☠☠
#define BotonArriba A0     //Entrada para el boton de aumento de tiempo Color=Rojo
#define BotonAbajo 12      //Entrada para el boton de decremento de tiempo Color=Azul
#define BotonPause 8       //Boton Puase Color = Verde
//☠☠☠☠☠☠☠Realy☠☠☠☠☠☠☠☠☠☠
#define pinRelay A2        // Salida del Relay
//☠☠☠☠☠☠☠Sensor☠☠☠☠☠☠☠☠☠
#define Sensor = 7;        //Pin del Sensor
//☠☠☠☠☠☠☠LCD I2C☠☠☠☠☠☠☠☠☠
#define SCL A5
#define SDA A4
LiquidCrystal_I2C_Hangul lcd(0x3F,16,4);


//☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠
//☠☠☠☠☠☠☠☠Variables☠☠☠☠☠☠☠☠
//☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠
unsigned int cycles = 0;   // Variable que guarda los ciclos (dando un rango útil de 0 a 65,535 ciclos)
int timer;                 //Tiempo que mostrara la pantalla LCD
int tiempoTemp = 60;       //Valor del temporizador del timer predeterminado
int highCiclos;            //Variable para guardar datos altos de los ciclos en la EEPROM
int lowCiclos;             //Variable para guardar datos bajos de los ciclos en la EEPROM
int tiempoHigh;            //variable de tiempo en alto que se guarda en la EEPROM
int tiempoLow;             //variable de tiempo en bajo que se guarda en la EEPROM
int rebotes;               //variable que permite que en los botone al mantener presionados capture un solo pulso   
int resetTemp = 5;         //

int resetTimer;
int BotonPauseVar = 0;
bool actualizar;
bool indicadorPause;
bool EstadoPuerta = true;  //Estado de la puerta


//☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠
//☠☠☠☠☠☠☠☠SetUp☠☠☠☠☠☠☠☠☠☠
//☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠
void setup() {
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
  lcd.clear();
  pinMode(BotonArriba, INPUT);
  pinMode(BotonPause, INPUT);
  pinMode(BotonAbajo, INPUT);
  pinMode(Sensor, INPUT);
  pinMode(pinRelay, OUTPUT);

  //digitalWrite(pinRelay, HIGH); // Relay activo: no deja pasar voltaje

  timer = tiempoTemp;
  TCCR1A = 0;               //1A y 1B variables para iniciar y declarar TCNT1
  TCCR1B = 0;
  TCNT1 = 2791;             // valor para 1 segundo
  TCCR1B |= (1 << CS12);    // 256 prescaler
  TIMSK1 |= (1 << TOIE1);   // enable timer overflow interrupt

  //Leer el cycles y el contador desde la EEPROM
  highCiclos = EEPROM.read(0);
  lowCiclos = EEPROM.read(1);

  tiempoHigh = EEPROM.read(2);
  tiempoLow = EEPROM.read(3);

  cycles = highCiclos;
  cycles = cycles << 8;
  cycles |= lowCiclos;

  tiempoTemp = tiempoHigh;
  tiempoTemp = tiempoTemp << 8;
  tiempoTemp |= tiempoLow;

  timer = tiempoTemp;
}


//☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠
//☠☠☠Contabiliza cada segundo☠☠☠☠
//☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠
ISR(TIMER1_OVF_vect) {
  TCNT1 = 2791;               //valor para 1 segundo
  actualizar = true;
  if(resetTimer == true){
    resetTemp--;
    }
}

void reinicio() {
  timer = tiempoTemp;
}

void pause(){
  if (digitalRead(BotonPause) == LOW) {
    
    if(bitRead(rebotes, 1) == 0){    
    bitSet(rebotes, 1);
    actualizarLCD();
    BotonPauseVar = BotonPauseVar + 1;
    
    if (BotonPauseVar == 1) {
      indicadorPause = true;
    }
    else {
      indicadorPause = false;
    }

//☠☠☠☠☠☠☠☠Menu Botones☠☠☠☠☠☠☠☠☠☠  
    while (BotonPauseVar == 1) {
//☠☠☠☠☠☠☠☠Aumentar Tiempo☠☠☠☠☠☠☠☠☠☠     
      if (digitalRead(BotonArriba) == LOW) {
        delay(200);
        tiempoTemp = tiempoTemp + 10;
        if (tiempoTemp > 600) {
          tiempoTemp = 10;
        }
        timer = tiempoTemp;
        actualizarLCD();
      }
//☠☠☠☠☠☠☠☠Disminuir Tiempo☠☠☠☠☠☠☠☠☠☠ 
      if (digitalRead(BotonAbajo) == LOW) {
        delay(200);
        tiempoTemp = tiempoTemp - 10;
        if (tiempoTemp < 10) {
          tiempoTemp = 600;
        }
        timer = tiempoTemp;
        actualizarLCD();
      }

      if (digitalRead(BotonPause) == LOW) {
        if(bitRead(rebotes, 1) == 0){
        bitSet(rebotes, 1);
        BotonPauseVar = BotonPauseVar + 1;
        }else{          
          resetTimer= true;
          if (resetTemp< 0){
            resetTemp = 5;
            cycles = 0;
            BotonPauseVar = 2;
            //indicadorPause = false;
            timer = tiempoTemp;
            EEPROM.write(0, 0);
            EEPROM.write(1, 0);
            lcd.clear();
            
            }
          }

      }else{
        resetTimer= false;
        resetTemp=5;
        bitClear(rebotes, 1);
      }
      if (BotonPauseVar == 2) {
        EEPROM.write(2, tiempoTemp >> 8);
        EEPROM.write(3, tiempoTemp  & 0xFF);
        BotonPauseVar = 0;
        //guardar en la eeprom el timer
        indicadorPause = false;
        lcd.clear();
      }

    } 
   }
  }else{
    bitClear(rebotes, 1);
   
  }
}


void actualizarLCD() {
  lcd.clear();
  lcd.setCursor(6, 0);
  lcd.print("#Cycles");
  lcd.setCursor(6, 1);
  lcd.print(cycles);
  lcd.setCursor(6, 2);
  lcd.print("Timer");
  lcd.setCursor(6, 3);
  lcd.print(tiempoTemp);
}



void loop() {
  // put your main code here, to run repeatedly:
  pause();
  if ( indicadorPause == false) {
    if (actualizar == true) {
      timer = timer - 1;

      if (timer == 0 ) {
        digitalWrite(pinRelay, LOW);
        reinicio();
      }
      else {
        digitalWrite(pinRelay, HIGH);
      }
      lcd.clear();
      actualizar = false;
      // LOW = Abierto, HIGH = Cerrado
      if(digitalRead(Sensor) == HIGH){        //la puerta esta cerrrada
          //false = abierto, true = cerrado
          if (EstadoPuerta == false){
            cycles++;
            EstadoPuerta = true;
          }
      }
      else{                                  //la puerta esta no cerrada
        EstadoPuerta = false;                // abierta
      }

         //grabar en la eeprom el conteo de cycle
         EEPROM.write(0, cycles >> 8);
         EEPROM.write(1, cycles & 0xFF);
      }
    }

  lcd.setCursor(6, 0);
  lcd.print("#Cycles");
  lcd.setCursor(6, 1);
  lcd.print(cycles);
  lcd.setCursor(6, 2);
  lcd.print("Timer");
  lcd.setCursor(6, 3);
  lcd.print(timer);
}
