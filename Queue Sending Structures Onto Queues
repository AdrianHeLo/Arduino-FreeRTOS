#include <Arduino_FreeRTOS.h>
#include "queue.h"

#define RED    3
#define BLUE   4
#define YELLOW 2

typedef int TaskProfiler;
TaskProfiler SenderTaskProfiler;
TaskProfiler ReciverTaskProfiler;

typedef enum {
  eSender1,
  eSender2
} Dataource_t;

typedef struct {
  uint8_t ucValue;
  Dataource_t eDataSource;
}Data_t;

static const Data_t xStructToSend[2] = {
  {100, eSender1},
  {50, eSender2} 
};

QueueHandle_t xQueue;

void setup()
{
  Serial.begin(9600);
  xQueue = xQueueCreate(3, sizeof(Data_t));
  xTaskCreate(vSenderTask, "Sender Task 1", 100, &(xStructToSend[0]), 1, NULL);
  xTaskCreate(vSenderTask, "Sender Task 2", 100, &(xStructToSend[1]), 2, NULL);
  xTaskCreate(vReciverTask, "Reciver Task", 100, NULL, 1, NULL);
}

void vSenderTask(void *pvParameters){
  BaseType_t qStatus;
  const TickType_t xTicketToWait = pdMS_TO_TICKS(100);
  pinMode(RED, OUTPUT);
  while(1){
      qStatus = xQueueSend(xQueue, pvParameters, xTicketToWait);  
      if(qStatus != pdPASS){
        Serial.println("Could not send to the queue");
      }
    
  }
}

void vReciverTask(void *pvParameters){
  Data_t xReceivedStructure;
  BaseType_t qStatus;
  
  for(;;){
    qStatus = xQueueReceive(xQueue, &xReceivedStructure, 0);  
    if(qStatus == pdPASS){
      if(xReceivedStructure.eDataSource == eSender1){
        Serial.print("This is from sender 1 : ");
        Serial.println(xReceivedStructure.ucValue);
      }
      else
      {
        Serial.print("This is from sender 2 : ");
        Serial.println(xReceivedStructure.ucValue);
      }
    }
    else
    {
      Serial.println("Could not receive from the queue");
    }
  }
  
}


void loop(){}
